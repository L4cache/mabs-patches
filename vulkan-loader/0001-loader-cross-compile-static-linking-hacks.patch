From 9fff3ceab74e568aa86e5be69cf6671d5ebb404d Mon Sep 17 00:00:00 2001
From: shinchiro <shinchiro@users.noreply.github.com>
Date: Thu, 8 Oct 2020 18:46:50 +0100
Subject: [PATCH 1/2] loader: cross-compile & static linking hacks

---
 loader/CMakeLists.txt       | 16 +++++++++++-----
 loader/loader_windows.c     |  4 +++-
 loader/vk_loader_platform.h | 14 ++++++++++++++
 3 files changed, 28 insertions(+), 6 deletions(-)

diff --git a/loader/CMakeLists.txt b/loader/CMakeLists.txt
index ad2aecb8b..b1c92741c 100644
--- a/loader/CMakeLists.txt
+++ b/loader/CMakeLists.txt
@@ -21,7 +21,7 @@ add_library(loader_specific_options INTERFACE)
 target_link_libraries(loader_specific_options INTERFACE loader_common_options Vulkan::Headers)
 target_include_directories(loader_specific_options INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/generated ${CMAKE_CURRENT_BINARY_DIR})
 
-if(WIN32)
+if(MSVC)
     if(MSVC)
         # Use static MSVCRT libraries
         foreach(configuration
@@ -136,7 +136,7 @@ set(ASM_FAILURE_MSG "The build will fall back on building with C code\n")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG}Note that this may be unsafe, as the C code requires tail-call optimizations to remove")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} the stack frame for certain calls. If the compiler does not do this, then unknown device")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} extensions will suffer from a corrupted stack.")
-if(WIN32)
+if(WIN32 AND NOT USE_UNSAFE_C_GEN)
     if(MINGW)
         find_program(JWASM_FOUND jwasm)
         if (JWASM_FOUND)
@@ -155,7 +155,7 @@ if(WIN32)
     if (USE_MASM)
       enable_language(ASM_MASM)
     endif ()
-    if(CMAKE_ASM_MASM_COMPILER_WORKS OR JWASM_FOUND)
+    if(MSVC AND CMAKE_ASM_MASM_COMPILER_WORKS OR JWASM_FOUND)
         if(MINGW)
             set(CMAKE_ASM_MASM_FLAGS ${CMAKE_ASM_MASM_FLAGS} ${JWASM_FLAGS})
         elseif(NOT CMAKE_CL_64 AND NOT JWASM_FOUND)
@@ -270,7 +270,7 @@ else()
     add_custom_target(loader_asm_gen_files) # This causes no assembly files to be generated.
 endif()
 
-if(WIN32)
+if(MSVC)
     add_library(loader-opt STATIC ${OPT_LOADER_SRCS})
     target_link_libraries(loader-opt PUBLIC loader_specific_options)
     add_dependencies(loader-opt loader_asm_gen_files)
@@ -314,16 +314,18 @@ if(WIN32)
     add_dependencies(vulkan loader_asm_gen_files)
 
 else()
-    if(APPLE AND BUILD_STATIC_LOADER)
+    if(BUILD_STATIC_LOADER)
         add_library(vulkan STATIC ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
         target_compile_definitions(vulkan PRIVATE BUILD_STATIC_LOADER)
     else()
         add_library(vulkan SHARED ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
     endif()
     add_dependencies(vulkan loader_asm_gen_files)
+    if (NOT BUILD_STATIC_LOADER)
     set_target_properties(vulkan
                           PROPERTIES SOVERSION "1"
                           VERSION ${VULKAN_LOADER_VERSION})
+    endif()
     target_link_libraries(vulkan PRIVATE ${CMAKE_DL_LIBS} m)
     if (NOT ANDROID)
         target_link_libraries(vulkan PRIVATE Threads::Threads)
@@ -397,6 +399,10 @@ if (TARGET asm_offset)
     set_target_properties(asm_offset ${LOADER_STANDARD_C_PROPERTIES})
 endif()
 
+if(WIN32)
+    list(APPEND PLATFORM_LIBS cfgmgr32)
+endif()
+
 # Generate pkg-config file.
 find_package(PkgConfig QUIET)
 if(PKG_CONFIG_FOUND)
diff --git a/loader/loader_windows.c b/loader/loader_windows.c
index 0f9861d80..97adcf34e 100644
--- a/loader/loader_windows.c
+++ b/loader/loader_windows.c
@@ -32,7 +32,7 @@
 // This needs to be defined first, or else we'll get redefinitions on NTSTATUS values
 #define UMDF_USING_NTSTATUS
 #include <ntstatus.h>
-
+#include <winsock2.h>
 #include "loader_windows.h"
 
 #include "allocation.h"
@@ -94,6 +94,7 @@ void windows_initialization(void) {
 #endif
 }
 
+#if !defined(BUILD_STATIC_LOADER)
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, LPVOID reserved) {
     switch (reason) {
         case DLL_PROCESS_ATTACH:
@@ -110,6 +111,7 @@ BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, LPVOID reserved) {
     }
     return TRUE;
 }
+#endif
 
 bool windows_add_json_entry(const struct loader_instance *inst,
                             char **reg_data,    // list of JSON files
diff --git a/loader/vk_loader_platform.h b/loader/vk_loader_platform.h
index 05d1a91d8..e389f7225 100644
--- a/loader/vk_loader_platform.h
+++ b/loader/vk_loader_platform.h
@@ -230,6 +230,20 @@ static inline void loader_platform_thread_once_fn(pthread_once_t *ctl, void (*fu
 #define LOADER_PLATFORM_THREAD_ONCE_DECLARATION(var) pthread_once_t var = PTHREAD_ONCE_INIT;
 #define LOADER_PLATFORM_THREAD_ONCE_EXTERN_DEFINITION(var) extern pthread_once_t var;
 #define LOADER_PLATFORM_THREAD_ONCE(ctl, func) loader_platform_thread_once_fn(ctl, func);
+#elif defined(_WIN32) && defined(BUILD_STATIC_LOADER)
+static BOOL CALLBACK InitFuncWrapper(PINIT_ONCE InitOnce, PVOID Parameter, PVOID *Context) {
+    void (*func)(void) = (void (*)(void))Parameter;
+    func();
+    return TRUE;
+}
+static void loader_platform_thread_once_fn(void *ctl, void (*func)(void)) {
+    assert(func != NULL);
+    assert(ctl != NULL);
+    InitOnceExecuteOnce((PINIT_ONCE)ctl, InitFuncWrapper, (void *)func, NULL);
+}
+#define LOADER_PLATFORM_THREAD_ONCE_DECLARATION(var) INIT_ONCE var = INIT_ONCE_STATIC_INIT;
+#define LOADER_PLATFORM_THREAD_ONCE_EXTERN_DEFINITION(var) extern INIT_ONCE var;
+#define LOADER_PLATFORM_THREAD_ONCE(ctl, func) loader_platform_thread_once_fn(ctl, func)
 #else
 #define LOADER_PLATFORM_THREAD_ONCE_DECLARATION(var)
 #define LOADER_PLATFORM_THREAD_ONCE_EXTERN_DEFINITION(var)
-- 
2.41.0

